name: Pipeline

on: [push]
env:
  AZURE_WEBAPP_NAME: flask-webapp
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.8'

jobs:
   build:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repo
    - uses: actions/checkout@v2

    # Setup Python environment
    - name: Setup Python environment
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # Setup pip cache dir
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    
    # Adds a cache to speedup runtime
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
            
    # Install dependencies
    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        pip install --quiet --requirement requirements.txt

    # Lints python with flake8 and pyline
    - name: Lint code
      run: | 
        flake8 --ignore=E501,E231 *.py
        pylint --disable=C0301 --disable=C0326 --disable=R0801 *.py

    # Runs our unit tests
    - name: Run unit tests
      run: |
        python -m unittest --verbose --failfast
   
   deploy-to-test:
    # Only run this job if "build" has ended successfully
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repo
    - uses: actions/checkout@v2

    # Setup Python environment
    - name: Setup Python environment
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # Setup pip cache dir
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    
    # Adds a cache to speedup runtime
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
            
    # Deploy to azure
    - name: Deploy to azure
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

    # Elastic Beanstalk CLI version
    # - name: Get EB CLI Version
      # run: |
        # python -m pip install --upgrade pip
        # pip install awsebcli --upgrade
        # eb --version
    
    # # Configure AWS Credentials
    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1
    
    # # Create the Elastic Beanstalk application
    # - name: Create EBS application
    #   run: |
    #     eb init -p python-3.7 flask-webapp --region us-east-1
    
    # # Create the Elastic Beanstalk environment
    # - name: Create test environment
    #   run: |
    #     (eb use app-deployed && eb status app-deployed && eb deploy) ||
    #     eb create app-deployed

   